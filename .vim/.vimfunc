" removes trailing whitespace characters from all lines
function! StripTrailingWhitespace()
  " Only strip if b:noStripWhitespace isn't set
  if exists('b:noStripWhitespace')
    return
  endif
  %s/\s\+$//e
endfunction

" return '[&et]' if &et is set wrong
" return '[mixed-indenting] if spaces and tabs are both used
" return '' if all is well
function! StatuslineTabWarning()
  if !exists('b:statusline_tab_warning')
    let b:statusline_tab_warning = ''

    if !&modifiable
      return b:statusline_tab_warning
    endif

    let tabs = search('^\t', 'nw') != 0

    " find spaces that aren't used as alignment in the first indent
    " column
    let spaces = search('^ \{' . &ts . ',}[^\t]', 'nw') != 0

    if tabs && spaces
      let b:statusline_tab_warning = '[mixed-indenting]'
    elseif (spaces && !&et) || (tabs && &et)
      let b:statusline_tab_warning = '[&et]'
    endif
  endif
  return b:statusline_tab_warning
endfunction

" return '[\s]' if trailing whitespace is found
" return '' otherwise
function! StatuslineTrailingSpaceWarning()
  if !exists('b:statusline_trailing_space_warning')
    let b:statusline_trailing_space_warning = ''

    if !&modifiable
      return b:statusline_trailing_space_warning
    endif

    if search('\s\+$', 'nw') != 0
      let b:statusline_trailing_space_warning = '[\s]'
    endif
  endif
  return b:statusline_trailing_space_warning
endfunction

" return [#x,my,$z] if long lines found
"   x is the number of lines
"   y is median length
"   z is longest length
" return '' if no long lines found
" 'Long line' is either &textwidth or 80 by default
function! StatuslineLongLineWarning()
  if !exists('b:statusline_long_line_warning')
    let b:statusline_long_line_warning = ''

    if !&modifiable
      return b:statusline_long_line_warning
    endif

    let long_line_lens = s:LongLines()

    if len(long_line_lens) > 0
      let b:statusline_long_line_warning = '[' .
        \ '#' . len(long_line_lens) . ',' .
        \ 'm' . s:Median(long_line_lens) . ',' .
        \ '$' . max(long_line_lens) . ']'
    endif
  endif
  return b:statusline_long_line_warning
endfunction

" return the syntax highlight group under cursor
function! StatuslineCurrentHighlight()
  if !exists('g:statusline_show_current_highlight')
    return ''
  endif

  let name = synIDattr(synID(line('.'),col('.'),1),'name')
  if name != ''
    let name = '[' . name . ']'
  endif
  return name
endfunction

function! CommentLine()
  s/^/\=b:comment_leader/
  nohlsearch
  endfunction

function! UncommentLine()
  execute 'substitute/^' . b:comment_leader . '//e'
  nohlsearch
  endfunction

" return a list of long line lengths in this buffer
function! s:LongLines()
  let threshold = (&tw ? &tw : 80)
  let spaces = repeat(' ', &ts)
  let line_lens = map(getline(1,'$'), "len(substitute(v:val, '\\t', spaces, 'g'))")
  return filter(line_lens, 'v:val > threshold')
endfunction

" find median of an array of numbers
function! s:Median(nums)
  let nums = sort(a:nums)
  let l = len(nums)

  if l % 2 == 1
    return nums[(l-1) / 2]
  else
    return (nums[l/2] + nums[(l/2)-1]) / 2
  endif
endfunction

function! RunShellCommand(cmdline)
  echo a:cmdline
  let exp_line = a:cmdline
  for part in split(a:cmdline, ' ')
    if part[0] =~ '\v[%#<]'
      let exp_part = fnameescape(expand(part))
      let exp_line = substitute(exp_line, part, exp_part, '')
    endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'Input : ' . a:cmdline)
  call setline(2, 'Expand: ' . exp_line)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !' . exp_line
  setlocal nomodifiable
  1
endfunction

function! GitLogLine()
  let gitcmd = 'git log -L'.line('.').','.line('.').':'.expand('%')
  echo gitcmd
  call RunShellCommand(gitcmd)
endfunction
